# Path to your oh-my-zsh installation.
export ZSH=/home/spiros/.oh-my-zsh


###
# setup options
###
#Frequently used directories
setopt AUTO_CD
cdpath=($HOME/projects $HOME/Labs $HOME/Warehouse $HOME/Downloads $HOME/.dotfiles $HOME/Documents)
# use share_history instead of setopt APPEND_HISTORY         # appends history to .zsh_history
setopt AUTO_PARAM_SLASH       # adds slash at end of tabbed dirs
setopt CHECK_JOBS             # check bg jobs on exit
setopt CORRECT                # corrects spelling
setopt CORRECT_ALL            # corrects spelling
setopt EXTENDED_GLOB          # globs #, ~ and ^
setopt EXTENDED_HISTORY       # saves timestamps on history
setopt GLOB_DOTS              # find dotfiles easier
setopt HASH_CMDS              # save cmd location to skip PATH lookup
setopt HIST_EXPIRE_DUPS_FIRST # expire duped history first
setopt HIST_NO_STORE          # don't save 'history' cmd in history
setopt INC_APPEND_HISTORY     # append history as command are entered
setopt LIST_ROWS_FIRST        # completion options left-to-right, top-to-bottom
setopt LIST_TYPES             # show file types in list
setopt MARK_DIRS              # adds slash to end of completed dirs
setopt NUMERIC_GLOB_SORT      # sort numerically first, before alpha
setopt PROMPT_SUBST           # sub values in prompt (though it seems to work anyway haha)
setopt RM_STAR_WAIT           # pause before confirming rm *
setopt SHARE_HISTORY          # share history between open shells

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="bullet-train"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
#DISABLE_LS_COLORS="true"
#LOAD set LS_COLORS from .dircolors
if [ -f ~/.dircolors ]; then
   eval $(dircolors -b $HOME/.dircolors)
fi


# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git rails ruby bundler copydir copyfile)

# User configuration

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8



# Compilation flags
# export ARCHFLAGS="-arch x86_64"


# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.zsh_aliases ]; then
   . ~/.zsh_aliases
fi




# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="bullet-train"
#BULLETRAIN CUSTOMIZATION
  # PROMPT
  BULLETTRAIN_PROMPT_CHAR='>'
  BULLETTRAIN_PROMPT_ROOT=true
  BULLETTRAIN_PROMPT_SEPARATE_LINE=false
  BULLETTRAIN_PROMPT_ADD_NEWLINE=true
  #STATUS
  BULLETTRAIN_STATUS_SHOW=true
  BULLETTRAIN_STATUS_EXIT_SHOW=false
  BULLETTRAIN_STATUS_BG='green'
  BULLETTRAIN_STATUS_ERROR_BG='red'
  BULLETTRAIN_STATUS_FG='black'
  #TIME
  BULLETTRAIN_TIME_SHOW=true
  BULLETTRAIN_TIME_12HR=false
  BULLETTRAIN_TIME_BG='black'
  BULLETTRAIN_TIME_FG='cyan'
  #CUSTOM
  BULLETTRAIN_CUSTOM_MSG='drumaddict'
  BULLETTRAIN_CUSTOM_BG='black'
  BULLETTRAIN_CUSTOM_FG='white'
  #CONTEXT
  BULLETTRAIN_CONTEXT_SHOW=true
  BULLETTRAIN_CONTEXT_BG='black'
  BULLETTRAIN_CONTEXT_FG='default'
  BULLETTRAIN_CONTEXT_DEFAULT_USER='none'
  BULLETTRAIN_IS_SSH_CLIENT='none'
  #Ruby RVM/Rbenv
  BULLETTRAIN_RUBY_SHOW=true
  BULLETTRAIN_RUBY_BG='magenta'
  BULLETTRAIN_RUBY_FG='white'
  BULLETTRAIN_RUBY_PREFIX="â™¦"
  #DIR
  BULLETTRAIN_DIR_SHOW=true
  BULLETTRAIN_DIR_BG='blue'
  BULLETTRAIN_DIR_FG='white'
  BULLETTRAIN_DIR_CONTEXT_SHOW=false
  BULLETTRAIN_DIR_EXTENDED=1
  #COMMAND EXECUTION TIME
  BULLETTRAIN_EXEC_TIME_SHOW=false
  BULLETTRAIN_EXEC_TIME_ELAPSED=5
  BULLETTRAIN_EXEC_TIME_BG='yellow'
  BULLETTRAIN_EXEC_TIME_FG='black'

  ###
  # ssh host completion
  ###
  zstyle -e ':completion:*:(ssh|scp):*' hosts 'reply=(
    ${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) \
         /dev/null)"}%%[# ]*}//,/ }
    ${=${(f)"$(cat /etc/hosts(|)(N) <<(ypcat hosts 2>/dev/null))"}%%\#*}
  )'

  #git helpers
  function gdt() {
    git tag -d $1;
    git push origin :refs/tags/$1
  }

  #system helpers

  # FIND PROCESS
  #usage e.g: "p csp_build" , "p python" etc
  function p(){
    ps aux | grep -i $1 | grep -v grep
    pgrep -fl "$1"
  }
  # KILL ALL
  #usage e.g: "ka csp_build" , "ka python" etc
  function ka(){
    echo "Killing all Processes $1"
    if [ ! -z "$1" ]; then
      pgrep -fl "$1"
      pkill -f "$1"
      echo "They are dead."
    else
      echo 'Aborted.Must provide pattern to match for processes names.'
    fi
  }
  #ruby/rails helpers
  # function rake() {
  #   if [ -f bin/spring ]; then
  #       bin/spring rake --trace $1
  #   elif [ -f bin/rake ]; then
  #       bin/rake --trace $1
  #   else
  #       bundle exec rake --trace $1
  #   fi
  # }

  # Bundle exec commands
# bundle_commands=( rake spec rspec cucumber cap watchr rails rackup )
# function run_bundler_cmd () {
#     if [ -e ./Gemfile ]; then
#         echo "bundle exec $@"
#         bundle exec $@
#     else
#         echo "$@"
#         $@
#     fi
# }
#
# for cmd in $bundle_commands
# do
#     alias $cmd="run_bundler_cmd $cmd"
# done

#emacs
#!/bin/bash

# simple script to shutdown the running Emacs daemon

# emacsclient options for reference
# -a Alternate editor, runs bin/false in this case
# -e eval the script

# If the server-process is bound and the server is in a good state, then kill
# the server

emacs_server_ok() {
  emacsclient -a "false" -e "(boundp 'server-process)"
}

function kemacs(){
  if [ "t" = "$(emacs_server_ok)" ]; then
    echo "Shutting down Emacs server"
    # wasn't removing emacs from ALT-TAB on mac
    # emacsclient -e "(server-force-delete)"
    emacsclient -e '(kill-emacs)'
  else
    echo "Emacs server not running"
  fi
}

#tmux
function tka(){
  echo "Killing all tmux sessions"
  for i in $(tmux ls | grep : | cut -d: -f1); do tmux kill-session -t $i; done
  echo "Done"
}

# ensure correct PATH
source $HOME/.zshenv


#general
olh() {
	local port=${1:-3000}
	open  "Google Chrome" http://localhost:$port;
 }

 # pull down repo for reading
 lookup-repo() {
 	local pwd=`pwd`
 	local target=~/projects/DEMOS

 	cd "$target"
 	git clone "$@"
 	cd "$pwd"
  subl .
 }

 function get_repo {
     url=$1;
     reponame=$(echo $url | awk -F/ '{print $NF}' | sed -e 's/.git$//');
     git clone $url "/home/spiros/projects/DEMOS/$reponame";
     cd "/home/spiros/projects/DEMOS/$reponame"
 }

# download any youtube or vimeo video to ~/Videos
# Very simple,bare wrapper.See gazillions of options at
# https://github.com/rg3/youtube-dl/blob/master/README.md#output-template-examples
download-video() {
	local folder=~/Videos
	mkdir -p "$folder"
	cd "$folder"
  youtube-dl -o '%(title)s.%(ext)s' "$@"
	cd -
}

chrome_localhost_tab(){
  /usr/bin/google-chrome "http://localhost:$1"
}

#tmuxinator
source ~/.bin/tmuxinator.zsh
