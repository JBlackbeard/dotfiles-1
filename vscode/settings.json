{
    // "C_Cpp.default.cppStandard": "c++14",
    // "cmake.configureOnOpen": true,
    // "cmake.configureArgs": [
    //     "-DCMAKE_TOOLCHAIN_FILE=C:\\Users\\spiros\\cpp\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake"
    // ],
    // "cmake.configureSettings": {},
    // CORE SETTINGS
    "workbench.editor.highlightModifiedTabs": true,
    "extensions.ignoreRecommendations": false,
    "workbench.sideBar.location": "left",
    "workbench.activityBar.visible": true,
    "workbench.statusBar.visible": true,
    "window.menuBarVisibility": "default",
    "breadcrumbs.enabled": false,
    "editor.multiCursorModifier": "alt",
    "workbench.colorTheme": "Gruvbox Dark Hard",
    "terminal.integrated.shell.windows": "C:\\Windows\\System32\\cmd.exe",
    // Java Red Hat
    "java.format.settings.url": "eclipse-formatter.xml",
    //VSVim Massive configuration with keybindings to match my native vim bindings as close as possible.
    "vim.easymotion": true,
    "vim.neovimPath": "F:\\Programs\\nvim\\bin\\nvim.exe",
    "vim.enableNeovim": true,
    "vim.sneak": false,
    "vim.useSystemClipboard": true,
    "vim.statusBarColorControl": true,
    "vim.debug.loggingLevel": "debug",
    "vim.leader": ";",
    "vim.insertModeKeyBindings": [],
    "vim.insertModeKeyBindingsNonRecursive": [],
    "vim.visualModeKeyBindings": [],
    // VISUAL MODE KEY BINDINGS
    "vim.visualModeKeyBindingsNonRecursive": [
        // Have the indent commands re-highlight the last visual selection to make multiple indentations easier
        {
            "before": [
                ">"
            ],
            "commands": [
                "editor.action.indentLines"
            ]
        },
        {
            "before": [
                "<"
            ],
            "commands": [
                "editor.action.outdentLines"
            ]
        },
        // H to beginning of line, L to the end
        {
            "before": [
                "H"
            ],
            "after": [
                "^"
            ]
        },
        {
            "before": [
                "L"
            ],
            "after": [
                "$"
            ],
        },
        // After block yank and paste, move cursor to the end of operated text and don't override register
        {
            "before": [
                "y"
            ],
            "after": [
                "y",
                "`",
                "]"
            ]
        },
        {
            "before": [
                "p"
            ],
            "after": [
                "\"",
                "_",
                "d",
                "P",
                "`"
            ]
        },
        // Comment Block
        {
            "before": [
                "g",
                "b"
            ],
            "after": [
                "g",
                "C"
            ]
        },
        // Format Selection
        {
            "before": [
                "<leader>",
                "f",
                "f"
            ],
            "commands": [
                "editor.action.formatSelection",
            ]
        },
        // have x (removes single character) not go into the default registry
        // nnoremap x "_x
        // Make X an operator that removes without placing text in the default registry
        {
            "before": [
                "X"
            ],
            "after": [
                "\"",
                "_",
                "d"
            ]
        },
        {
            "before": [
                "x"
            ],
            "after": [
                "\"",
                "_",
                "d"
            ]
        },
        // Don't yank to default register when changing something
        {
            "before": [
                "c"
            ],
            "after": [
                "\"",
                "x",
                "c"
            ]
        },
    ],
    // NORMAL MODE KEYBINDINGS
    "vim.normalModeKeyBindingsNonRecursive": [
        // GENERAL 
        // Open Command Palette 
        {
            "before": [
                "<leader>",
                "Tab"
            ],
            "commands": [
                "workbench.action.showCommands",
            ]
        },
        // Open New Window 
        {
            "before": [
                "<leader>",
                "n",
                "w"
            ],
            "commands": [
                "workbench.action.newWindow",
            ]
        },
        // Close Window 
        {
            "before": [
                "<leader>",
                "c",
                "w"
            ],
            "commands": [
                "workbench.action.closeWindow"
            ]
        },
        // User Settings UI
        {
            "before": [
                "<leader>",
                "u",
                "s"
            ],
            "commands": [
                "workbench.action.openSettings2"
            ]
        },
        // User Settings JSON
        {
            "before": [
                "<leader>",
                "u",
                "j"
            ],
            "commands": [
                "workbench.action.openSettingsJson"
            ]
        },
        {
            "before": [
                "<leader>",
                "c",
                "f"
            ],
            "commands": [
                "workbench.action.closeFolder"
            ]
        },
        {
            "before": [
                "<leader>",
                "o",
                "f"
            ],
            "commands": [
                "workbench.action.files.openFolder"
            ]
        },
        {
            "before": [
                "<leader>",
                "k",
                "s"
            ],
            "commands": [
                "workbench.action.openGlobalKeybindings"
            ]
        },

        //EDITING
        //  Comment
        {
            "before": [
                "g",
                "c"
            ],
            "after": [
                "g",
                "c",
                "c"
            ]
        },
        // Save
        {
            "before": [
                "leader",
                "s"
            ],
            "commands": [
                "workbench.action.files.save",
            ]
        },
        // Save All
        {
            "before": [
                "leader",
                "S"
            ],
            "commands": [
                "workbench.action.files.saveAll",
            ]
        },

        // Format Document
        {
            "before": [
                "<leader>",
                "f",
                "f"
            ],
            "commands": [
                "editor.action.formatDocument",
            ]
        },
        {
            "before": [
                "g",
                "l",
                "u"
            ],
            "commands": [
                "editor.action.moveLinesUpAction"
            ]
        },
        {
            "before": [
                "g",
                "l",
                "d"
            ],
            "commands": [
                "editor.action.moveLinesDownAction"
            ]
        },
        // Add Cursor Above / Below
        {
            "before": [
                "<C-k>"
            ],
            "commands": [
                "editor.action.insertCursorAbove"
            ]
        },
        {
            "before": [
                "<C-j>"
            ],
            "commands": [
                "editor.action.insertCursorBelow"
            ]
        },
        //DISPLAY
        // Show Files Explorer
        {
            "before": [
                "<leader>",
                "h"
            ],
            "commands": [
                "workbench.files.action.focusFilesExplorer"
            ]
        },
        // Show Welcome 
        {
            "before": [
                "g",
                "w"
            ],
            "commands": [
                "workbench.action.showWelcomePage",
            ]
        },
        // Show Open Editors in Explorer 
        {
            "before": [
                "<leader>",
                "o"
            ],
            "commands": [
                "workbench.files.action.focusOpenEditorsView"
            ]
        },
        //  Open View  
        {
            "before": [
                "Alt",
                "v"
            ],
            "commands": [
                "workbench.action.openView"
            ]
        },
        // Show Context Menu
        {
            "before": [
                "M"
            ],
            "commands": [
                "editor.action.showContextMenu"
            ]
        },
        // Show open recent files
        {
            "before": [
                "<leader>",
                "o",
                "r"
            ],
            "commands": [
                "workbench.action.openRecent"
            ]
        },

        // DEBUG
        // Show (List) Breakpoints View
        {
            "before": [
                "<leader>",
                "b",
                "l"
            ],
            "commands": [
                "workbench.debug.action.focusBreakpointsView"
            ]
        },
        // Toggle Breakpoint
        {
            "before": [
                "<leader>",
                "b",
                "b"
            ],
            "commands": [
                "editor.debug.action.toggleBreakpoint",
            ]
        },
        // Add  Conditonal Breakpoint
        {
            "before": [
                "<leader>",
                "b",
                "c"
            ],
            "commands": [
                "editor.debug.action.conditionalBreakpoint",
            ]
        },
        // Go To Previous Breakpoint
        {
            "before": [
                "<leader>",
                "b",
                "p"
            ],
            "commands": [
                "editor.debug.action.goToPreviousBreakpoint"
            ]
        },
        // Go To Next Breakpoint
        {
            "before": [
                "<leader>",
                "b",
                "n"
            ],
            "commands": [
                "editor.debug.action.goToNextBreakpoint"
            ]
        },
        // Debug Watch View Focus
        {
            "before": [
                "<leader>",
                "d",
                "w"
            ],
            "commands": [
                "workbench.debug.action.focusWatchView"
            ]
        },
        // Start Debugging F5
        {
            "before": [
                "<leader>",
                "d",
                "s"
            ],
            "commands": [
                "workbench.action.debug.start",
            ]
        },
        // Start Without Debugging - Run Ctrl+ F5
        {
            "before": [
                "<leader>",
                "d",
                "r"
            ],
            "commands": [
                "workbench.action.debug.run"
            ]
        },
        // Debug Stop Shift + F5
        {
            "before": [
                "<leader>",
                "d",
                "x"
            ],
            "commands": [
                "workbench.action.debug.stop"
            ]
        },
        // Debug Pause F6
        {
            "before": [
                "<leader>",
                "d",
                "p"
            ],
            "commands": [
                "workbench.action.debug.pause"
            ]
        },
        // Debug Continue F5
        {
            "before": [
                "<leader>",
                "d",
                "c"
            ],
            "commands": [
                "workbench.action.debug.continue"
            ]
        },
        // Debug StepInto F11
        {
            "before": [
                "<leader>",
                "d",
                "i"
            ],
            "commands": [
                "workbench.action.debug.stepInto"
            ]
        },
        // Debug StepOut Shift + F11
        {
            "before": [
                "<leader>",
                "d",
                "o"
            ],
            "commands": [
                "workbench.action.debug.stepOut"
            ]
        },
        // Debug StepOver F10
        {
            "before": [
                "<leader>",
                "d",
                "j"
            ],
            "commands": [
                "workbench.action.debug.stepOver"
            ]
        },
        // Debug Run to Cursor
        {
            "before": [
                "<leader>",
                "d",
                "t"
            ],
            "commands": [
                "editor.debug.action.runToCursor"
            ]
        },
        // SEARCH AND REPLACE
        {
            "before": [
                "g",
                "f"
            ],
            "commands": [
                "actions.find"
            ]
        },
        {
            "before": [
                "g",
                "F"
            ],
            "commands": [
                "workbench.view.search"
            ]
        },
        //Find and replace in current file
        {
            "before": [
                "g",
                "r"
            ],
            "commands": [
                "editor.action.startFindReplaceAction"
            ]
        },
        //Find and replace in  files
        {
            "before": [
                "g",
                "R"
            ],
            "commands": [
                "workbench.action.replaceInFiles"
            ]
        },
        //EDITOR MANAGEMENT
        //Go To Previous Editor
        {
            "before": [
                "<leader>",
                "<leader>"
            ],
            "commands": [
                "workbench.action.openPreviousEditorFromHistory",
                "list.select"
            ]
        },
        // Split Editor horizontally
        {
            "before": [
                "g",
                "s",
                "h"
            ],
            "commands": [
                "workbench.action.splitEditor"
            ]
        },
        // Split Editor vertically
        {
            "before": [
                "g",
                "s",
                "v"
            ],
            "commands": [
                "workbench.action.splitEditorOrthogonal"
            ]
        },

        // Focus left editor group
        {
            "before": [
                "<C-h>"
            ],
            "commands": [
                "workbench.action.focusLeftGroup"
            ]
        },
        // Focus right editor group
        {
            "before": [
                "<C-l>"
            ],
            "commands": [
                "workbench.action.focusRightGroup"
            ]
        },
        // Close editors group
        {
            "before": [
                "<leader>",
                "q"
            ],
            "commands": [
                "workbench.action.closeEditorsInGroup"
            ]
        },
        // Close all groups
        {
            "before": [
                "<leader>",
                "Q"
            ],
            "commands": [
                "workbench.action.closeAllGroups"
            ]
        },
        // Close active editor
        {
            "before": [
                "<leader>",
                "c",
                "c"
            ],
            "commands": [
                "workbench.action.closeActiveEditor"
            ]
        },
        //  Close other editors
        {
            "before": [
                "<leader>",
                "c",
                "o"
            ],
            "commands": [
                "workbench.action.closeOtherEditors"
            ]
        },
        //  Move editors group left
        {
            "before": [
                "<leader>",
                "g",
                "h"
            ],
            "commands": [
                "workbench.action.moveActiveEditorGroupLeft"
            ]
        },
        //  Move editors group right
        {
            "before": [
                "<leader>",
                "g",
                "l"
            ],
            "commands": [
                "workbench.action.moveActiveEditorGroupRight"
            ]
        },

        //  Move editor left in same group
        {
            "before": [
                "<leader>",
                "e",
                "h"
            ],
            "commands": [
                "workbench.action.moveEditorLeftInGroup"
            ]
        },
        //  Move editor right in same group
        {
            "before": [
                "<leader>",
                "e",
                "l"
            ],
            "commands": [
                "workbench.action.moveEditorRightInGroup"
            ]
        },

        //  Focus on previous editor in group
        {
            "before": [
                "left"
            ],
            "commands": [
                "workbench.action.previousEditor"
            ]
        },
        //  Focus on next editor in group
        {
            "before": [
                "right"
            ],
            "commands": [
                "workbench.action.nextEditor"
            ]
        },

        //CORE SETTINGS COPIED FROM MY RAW VIM SETTINGS
        // H to beginning of line, L to the end
        {
            "before": [
                "H"
            ],
            "commands": [
                "cursorHome"
            ]
        },
        {
            "before": [
                "L"
            ],
            "commands": [
                "cursorEnd"
            ]
        },
        // Easier word yanking
        {
            "before": [
                "leader",
                "w"
            ],
            "after": [
                "y",
                "i",
                "w"
            ]
        },
        // Copy file contents to clipboard maggVG"*y`a
        {
            "before": [
                "leader",
                "a"
            ],
            "after": [
                "m",
                "a",
                "g",
                "g",
                "V",
                "G",
                "\"",
                "*",
                "y",
                "`",
                "a"
            ]
        },
        // Go to visual mode and select all contents of file, <esc>ggVG<CR>
        {
            "before": [
                "leader",
                "v"
            ],
            "after": [
                "escape",
                "g",
                "g",
                "V",
                "G",
                "enter"
            ]
        },
        // have x (removes single character) not go into the default registry
        // nnoremap x "_x
        // Make X an operator that removes without placing text in the default registry
        {
            "before": [
                "X"
            ],
            "after": [
                "\"",
                "_",
                "d"
            ]
        },
        {
            "before": [
                "XX"
            ],
            "after": [
                "\"",
                "_",
                "d",
                "d"
            ]
        },
        // Don't yank to default register when changing something
        {
            "before": [
                "c"
            ],
            "after": [
                "\"",
                "x",
                "c"
            ]
        },
        //Fix the cw at the end of line bug default Vim has special treatment (:help cw)
        {
            "before": [
                "c",
                "w"
            ],
            "after": [
                "c",
                "e"
            ]
        },
        {
            "before": [
                "d",
                "w"
            ],
            "after": [
                "d",
                "e"
            ]
        },
        // RICH LANGUAGES EDITING
        // Show all symbols
        {
            "before": [
                "g",
                "a",
                "s"
            ],
            "commands": [
                "workbench.action.showAllSymbols"
            ]
        },
        // Go to symbol
        {
            "before": [
                "g",
                "y",
                "y"
            ],
            "commands": [
                "workbench.action.gotoSymbol"
            ]
        },
        // Peek definiton.
        {
            "before": [
                "<leader>",
                "p",
                "d"
            ],
            "commands": [
                "editor.action.peekDefinition",
                "list.focusFirstChild"
            ]
        },
        // Open definiton to the side 
        {
            "before": [
                "g",
                "s",
                "d"
            ],
            "commands": [
                "editor.action.revealDefinitionAside"
            ]
        },
        //  Quick Fix 
        {
            "before": [
                "q",
                "f"
            ],
            "commands": [
                "editor.action.quickFix"
            ]
        },
        // Show References
        {
            "before": [
                "<leader>",
                "r",
                "s"
            ],
            "commands": [
                "editor.action.referenceSearch.trigger",
            ]
        },
        // Rename Symbol
        {
            "before": [
                "<leader>",
                "r",
                "e"
            ],
            "commands": [
                "editor.action.rename",
            ]
        },
        // Optimize Imports
        {
            "before": [
                "<leader>",
                "i"
            ],
            "commands": [
                "editor.action.organizeImports",
            ]
        },
    ],
}